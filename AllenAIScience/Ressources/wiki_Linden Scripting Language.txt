Linden Scripting Language, or LSL, is the programming language used by residents of Second Life (SL), a virtual world by Linden Lab and similar virtual worlds.
LSL has a syntax similar to C and allows objects to control the behavior of in-world objects of Second Life from the Internet via email, XML-RPC, and most recently, HTTP requests.


== LSL design ==
Linden Scripting Language is a state-event driven scripting language, in the sense of a finite state machine. A script consists of variables, function definitions, and one or more named states. Each state contains a description of how to react to events that occur while the program is within that state. The system sends to the script, such as timers, movement, chat (from other agents), email, and collisions (with objects in the virtual world). Scripts can change most aspects of the state of the object and communicate with other objects and agents. As soon as a script is added to an object, and turned on, it begins to execute.
A script is tightly bound to the concept of virtual-world objects (in the 3D modeling sense rather than in the object-oriented sense) called primitives. An object in Second Life represents something like a chair or a wall, or possibly something invisible. Multiple scripts may be placed inside an object, where they all execute simultaneously.
There are over 300 library functions available. Users can also define additional functions. LSL is a strongly typed language that is compiled to bytecode before runtime execution in a virtual machine (VM) on one of Linden Lab's servers.
LSL's native data structures includes integers, floating point numbers, strings, keys(UUID), vectors (used for 3D coordinates and RGB color expression), and rotations (quaternions). There are also heterogeneous lists. There are no arrays; multiple list functions are used to adapt programs requiring array structures. There is no built-in persistent data storage, such as a file or database (though users have found various workarounds for this like storing data in various data fields of the items containing scripts). On the other hand, scripts continue to run even when a user is not logged in, and if an object is saved (taken into inventory), and then re-introduced into the World later, it still maintains its previous state. In addition, the mechanisms for communicating via HTTP can be used to store a state externally.
Some functions in LSL have built-in delays, which range from a 0.1-second delay when (for example) requesting string data from a notecard; to a 20-second script pause after sending an e-mail message. The delays help prevent developers from writing LSL scripts that could overtax system resources. Memory available to LSL scripts (when compiled as mono) is capped at about 64 KiB, which places a practical limit on how much a single script can do, however the ability to use multiple scripts and to call scripts from another script allows the user to pragmatically work around this 64 KiB cap.


== Permission system ==
Certain actions in LSL require permissions:
take money from agent's account
take agent's controls
start or stop Animations on agent
attach/detach from agent
change links
track the agent's camera position and rotation
control the agent's camera
The permission system, however, is an issue for scripts owned by the land owner: those scripts can modify the parcel settings without requiring permissions. A malicious script can unsit avatars, ban and unban avatars, destroy the terrain that includes returning of objects by letting them fall out of the World, and gather the ip addresses of avatars by manipulating the media settings for that avatar.


== Default LSL script ==
The default script, "Hello, Avatar", a hello world program that speaks (streams message to local chat ("heard" (printed) by all viewers (clients) within 20 meters (3D virtual environment) of the task)) when the script is first saved, initialized or reset (in this case, since the command is in the default "state", the first to be run on initialization) or 'touched' (a simple user interaction usually initiated using a mouse click), looks like:


== Mono ==
The revised version of Second Life's scripting virtual machine is based on Mono, the open source implementation of the Microsoft.NET framework. The Mono VM was introduced to several simulators (sims) on the Second Life Beta grid for compatibility testing on 29 January 2008 and later that year on 20 August 2008 Linden Lab started deploying it on the production grid - with the entire production grid updated to use it on 29 August 2008.
While the LSL scripting language remained the same, scripts executed on the Mono underpinnings were up to 220 times faster in execution, but at the cost of a somewhat higher overhead when creating (rezzing) scripted objects and moving them from sim to sim.


== More complex example script ==
Below is an example of a relatively simple LSL script, that when placed in a primitive along with a selection of .wav sound files, users may select the sound files to be played in series. This scripting is required to play full length songs in Second Life, as the sound file length is limited to a maximum of 10 seconds per clip at upload to SL.


== References ==


== External links ==
LSL forum—Second Life LSL forum
Extensive Tutorial on LSL—Dr. Dobb's
LSL Wiki—A community effort to supplement the available LSL documentation
LSL Portal—A new Wiki hosted by Second Life
Mono for Second Life – Information regarding the move to Mono
Linden Scripting Language Problems Criticism by Xah Lee
Linden Scripting Language Script Repository - Privately maintained library of LSL Scripts.