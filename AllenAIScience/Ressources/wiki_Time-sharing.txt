In computing, time-sharing is the sharing of a computing resource among many users by means of multiprogramming and multi-tasking. Its introduction in the 1960s by students and professors at Dartmouth College, and emergence as the prominent model of computing in the 1970s, represented a major technological shift in the history of computing.
By allowing a large number of users to interact concurrently with a single computer, time-sharing dramatically lowered the cost of providing computing capability, made it possible for individuals and organizations to use a computer without owning one, and promoted the interactive use of computers and the development of new interactive applications.


== HistoryEdit ==


=== Batch processingEdit ===

The earliest computers were extremely expensive devices, and very slow in comparison to later models. Machines were typically dedicated to a particular set of tasks and operated by control panels, the operator manually entering small programs via switches in order to load and run a series of programs. These programs might take hours, or even weeks, to run. As computers grew in speed, run times dropped, and soon the time taken to start up the next program became a concern. Batch processing methodologies evolved to decrease these "dead periods" by queuing up programs so that as soon as one program completed, the next would start.
To support a batch processing operation, a number of comparatively inexpensive card punch or paper tape writers were used by programmers to write their programs "offline". When typing (or punching) was complete, the programs were submitted to the operations team, which scheduled them to be run. Important programs were started quickly; how long before less important programs were started was unpredictable. When the program run was finally completed, the output (generally printed) was returned to the programmer. The complete process might take days, during which time the programmer might never see the computer.
The alternative of allowing the user to operate the computer directly was generally far too expensive to consider. This was because users might have long periods of entering code while the computer remained idle. This situation limited interactive development to those organizations that could afford to waste computing cycles: large universities for the most part. Programmers at the universities decried the behaviors that batch processing imposed, to the point that Stanford students made a short film humorously critiquing it. They experimented with new ways to interact directly with the computer, a field today known as human–computer interaction.


=== Time-sharingEdit ===

Time-sharing was developed out of the realization that while any single user would make inefficient use of a computer, a large group of users together would not. This was due to the pattern of interaction: Typically an individual user entered bursts of information followed by long pauses but a group of users working at the same time would mean that the pauses of one user would be filled by the activity of the others. Given an optimal group size, the overall process could be very efficient. Similarly, small slices of time spent waiting for disk, tape, or network input could be granted to other users.
Implementing a system able to take advantage of this was initially difficult. Batch processing was effectively a methodological development on top of the earliest systems. Since computers still ran single programs for single users at any time, the primary change with batch processing was the time delay between one program and the next. Developing a system that supported multiple users at the same time was a completely different concept. The "state" of each user and their programs would have to be kept in the machine, and then switched between quickly. This would take up computer cycles, and on the slow machines of the era this was a concern. However, as computers rapidly improved in speed, and especially in size of core memory in which users' states were retained, the overhead of time-sharing continually decreased, relatively speaking.
The concept was first described publicly in early 1957 by Bob Bemer as part of an article in Automatic Control Magazine. The first project to implement a time-sharing system was initiated by John McCarthy in late 1957, on a modified IBM 704, and later on an additionally modified IBM 7090 computer. Although he left to work on Project MAC and other projects, one of the deliverables of the project, known as the Compatible Time-Sharing System or CTSS, was demonstrated in November 1961. CTSS has a good claim to be the first time-sharing system and remained in use until 1973. Another contender for the first demonstrated time-sharing system was PLATO II, created by Donald Bitzer at a public demonstration at Robert Allerton Park near the University of Illinois in early 1961. Bitzer has long said that the PLATO project would have gotten the patent on time-sharing if only the University of Illinois had known how to process patent applications faster, but at the time university patents were so few and far between, they took a long time to be submitted. JOSS began time-sharing service in January 1964. The first commercially successful time-sharing system was the Dartmouth Time Sharing System.


=== DevelopmentEdit ===
Throughout the late 1960s and the 1970s, computer terminals were multiplexed onto large institutional mainframe computers (Centralized computing systems), which in many implementations sequentially polled the terminals to see whether any additional data was available or action was requested by the computer user. Later technology in interconnections were interrupt driven, and some of these used parallel data transfer technologies such as the IEEE 488 standard. Generally, computer terminals were utilized on college properties in much the same places as desktop computers or personal computers are found today. In the earliest days of personal computers, many were in fact used as particularly smart terminals for time-sharing systems.
With the rise of microcomputing in the early 1980s, time-sharing faded into the background because individual microprocessors were sufficiently inexpensive that a single person could have all the CPU time dedicated solely to their needs, even when idle. However, the Internet brought the general concept of time-sharing back into popularity. Expensive corporate server farms costing millions can host thousands of customers all sharing the same common resources. As with the early serial terminals, web sites operate primarily in bursts of activity followed by periods of idle time. This bursting nature permits the service to be used by many customers at once, usually with no perceptible communication delays, unless the servers start to get very busy.


=== Time-sharing businessEdit ===
In the 1960s, several companies started providing time-sharing services as service bureaus. Early systems used Teletype Model 33 KSR or ASR or Teletype Model 35 KSR or ASR machines in ASCII environments, and IBM Selectric typewriter-based terminals (especially the IBM 2741) with two different seven-bit codes. They would connect to the central computer by dial-up Bell 103A modem or acoustically coupled modems operating at 10–15 characters per second. Later terminals and modems supported 30–120 characters per second. The time-sharing system would provide a complete operating environment, including a variety of programming language processors, various software packages, file storage, bulk printing, and off-line storage. Users were charged rent for the terminal, a charge for hours of connect time, a charge for seconds of CPU time, and a charge for kilobyte-months of disk storage.
Common systems used for time-sharing included the SDS 940, the PDP-10, and the IBM 360. Companies providing this service included GE's GEISCO, IBM subsidiary The Service Bureau Corporation, Tymshare (founded in 1966), National CSS (founded in 1967 and bought by Dun & Bradstreet in 1979), Dial Data (bought by Tymshare in 1968), and Bolt, Beranek, and Newman (BBN). By 1968, there were 32 such service bureaus serving the US National Institutes of Health (NIH) alone. The Auerbach Guide to Timesharing (1973) lists 125 different timesharing services using equipment from Burroughs, CDC, DEC, HP, Honeywell, IBM, RCA, Univac, and XDS.


=== The computer utilityEdit ===
Beginning in 1964, the Multics operating system was designed as a computing utility, modeled on the electrical or telephone utilities. In the 1970s, Ted Nelson's original "Xanadu" hypertext repository was envisioned as such a service. It seemed as the computer industry grew that no such consolidation of computing resources would occur as timesharing systems. In the 1990s the concept was, however, revived in somewhat modified form under the banner of cloud computing.


=== SecurityEdit ===
Time-sharing was the first time that multiple processes, owned by different users, were running on a single machine, and these processes could interfere with one another. For example, one process might alter shared resources which another process relied on, such as a variable stored in memory. When only one user was using the system, this would result in possibly wrong output - but with multiple users, this might mean that other users got to see information they were not meant to see.
To prevent this from happening, an operating system needed to enforce a set of policies that determined which privileges each process had. For example, the operating system might deny access to a certain variable by a certain process.
The first international conference on computer security in London in 1971 was primarily driven by the time-sharing industry and its customers.


== Notable time-sharing systemsEdit ==

Significant early timesharing systems:
Allen-Babcock RUSH (Remote Users of Shared Hardware) Time-sharing System on IBM S/360 hardware (1966) → Tymshare
AT&T Bell Labs Unix (1971) → UC Berkeley BSD Unix (1977)
BBN PDP-1 Time-sharing System → Massachusetts General Hospital PDP-1D → MUMPS
BBN TENEX → DEC TOPS-20, Foonly FOONEX, MAXC OS at PARC, Stanford Low Overhead Timesharing System (LOTS)
Berkeley Timesharing System at UC Berkeley Project Genie → Scientific Data Systems SDS 940 (Tymshare, BBN, SRI, Community Memory) → BCC 500 → MAXC at PARC
Burroughs Time-sharing MCP → HP 3000 MPE
Cambridge Multiple Access System was developed for the Titan, the prototype Atlas 2 computer built by Ferranti for the University of Cambridge. This was the first time-sharing system developed outside the United States, and which influenced the later development of UNIX.
CDC MACE, APEX → Kronos → NOS → NOS/VE
CompuServe, also branded as Compu-Serv, CIS.
Compu-Time, Inc., on Honeywell 400/4000, started in 1968 in Ft Lauderdale, Florida, moved to Daytona Beach in 1970.
Dartmouth Time Sharing System (DTSS) → GE Time-sharing → GEnie
DEC PDP-6 Time-sharing Monitor → TOPS-10 → TSS-8, RSTS-11, RSX-11 → VAX/VMS
HP 2000 Time-Shared BASIC
IBM CALL/360, CALL/OS - using IBM System/360 Model 50
IBM CP-40 → CP-67 → CP-370 → CP/CMS → VM/CMS
IBM TSO for OS/MVT → for OS/VS2 → for MVS → for z/OS
IBM TSS/360 → TSS/370
International Timesharing Corporation on dual CDC 3300 systems.
MIT CTSS → MULTICS (MIT / GE / Bell Labs) → Unix
MIT Time-sharing System for the DEC PDP-1 → ITS
McGill University MUSIC → IBM MUSIC/SP
Michigan Terminal System, on the IBM S/360-67, S/370, and successors.
Michigan State University CDC SCOPE/HUSTLER System
National CSS VP/CSS, on IBM 360 series; originally based on IBM's CP/CMS.
Oregon State University OS-3, on CDC 3000 series.
Prime Computer PRIMOS
RAND JOSS → JOSS-2 → JOSS-3
RCA TSOS → Univac / Unisys VMOS → VS/9
Service in Informatics and Analysis (SIA), on CDC 6600 Kronos.
System Development Corporation Time-sharing System, on the AN/FSQ-32.
Stanford ORVYL and WYLBUR, on IBM S/360-67.
Stanford PDP-1 Time-sharing System → SAIL → WAITS
Time Sharing Ltd. (TSL) on DEC PDP-10 systems → Automatic Data Processing (ADP), first commercial time-sharing system in Europe and first dual (fault tolerant) time-sharing system.
Tymshare SDS-940 → Tymcom X → Tymcom XX
UC Berkeley CAL-TSS, on CDC 6400.
XDS UTS → CP-V → Honeywell CP-6


== See alsoEdit ==
Cloud Computing
The Heralds of Resource Sharing, a 1972 film.
History of CP/CMS, IBM's virtual machine operating system (CP) that supported time-sharing (CMS).
IBM M44/44X, an experimental computer system based on an IBM 7044 used to simulate multiple virtual machines.
IBM System/360 Model 67, the only IBM S/360 series mainframe to support virtual memory.
Multiseat configuration, multiple users on a single personal computer.
Project MAC, a DARPA funded project at MIT famous for groundbreaking research in operating systems, artificial intelligence, and the theory of computation.
TELCOMP, an interactive, conversational programming language based on JOSS, developed by BBN in 1964.
Timeline of operating systems
VAX (Virtual Address eXtension), a computer architecture and family of computers developed by DEC.
Utility Computing
Virtual memory


== ReferencesEdit ==


== Further readingEdit ==
Nelson, Theodor (1974). Computer Lib: You Can and Must Understand Computers Now; Dream Machines: "New Freedoms Through Computer Screens— A Minority Report". Self-published. ISBN 0-89347-002-3. pp. 56–57.


== External linksEdit ==
"Time Sharing Supervisor Programs", notes comparing the supervisor programs of CP-67, TSS/360, the Michigan Terminal System (MTS), and Multics by Michael T. Alexander, Advanced Topics in Systems Programming (1970, revised 1971), University of Michigan Engineering Summer Conference.
"The Computer Utility As A Marketplace For Computer Services", Robert Frankston's MIT Master's Thesis, 1973.
Reminiscences on the Theory of Time-Sharing by John McCarthy, 1983.
Origins of timesharing by Bob Bemer.
"40 years of Multics, 1969-2009", an interview with Professor Fernando J. Corbató on the history of Multics and origins of time-sharing, 2009.
"Mainframe Computers: The Virtues of Sharing", Revolution: The First 2000 Years of Computing, Computer History Museum Exhibition, January 2011.
"Mainframe Computers: Timesharing as a Business", Revolution: The First 2000 Years of Computing, Computer History Museum Exhibition, January 2011.